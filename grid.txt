Grid:二维的基于网格的布局系统

NO.1
父容器(Grid Container) 的全部属性
1.01 把容器元素定义为一个网格
    display: grid|inline-grid|subgrid
1.02 定义网格的列和行
    grid-template-columns: 40px 50px auto 50px 40px;
    grid-template-rows: 25% 100px auto;

    1.02.1 空格自动分配数字命名
    grid-template-rows: 25% 100px auto;

    1.02.2 网格线命名
    grid-template-rows: [row1-start] 25% [row1-end] 100px [third-line] auto [last-line];

    1.02.3 网格线可以有不止一个名字
    grid-template-rows: [row1-start] 25% [row1-end row2-start] 25% [row2-end];

    1.02.4 包含重复的部分，则可以使用repeat() 符号来简化写法
    grid-template-columns: repeat(3, 20px [col-start]) 5%;

1.03 定义网格模板grid-template-areas
    .container {
        grid-template-areas: 
            "header header header header"
            "main main . sidebar"
            "footer footer footer footer";
        grid-template-columns: 50px 50px 50px 50px;
        grid-template-rows: auto;
    }

    .item-a {
    grid-area: header;
    }
    .item-b {
    grid-area: main;
    }
    .item-c {
    grid-area: sidebar;
    }
    .item-d {
    grid-area: footer;
    }
1.04 grid-template是1.2和1.3的简写
    grid-template: none | subgrid | <grid-template-rows> / <grid-template-columns>;

1.05 设置列/行之间的间距的宽度grid-column-gap、grid-row-gap
    .container {
    grid-column-gap: 10px;
    grid-row-gap: 15px;
    }
1.06 1.05的简写grid-gap

1.07 （内容与网格区域、justify-items行轴）沿着行轴对齐网格内的内容，该值适用于容器内的所有的 grid items。
    .container {
    justify-items: start | end | center | stretch;
    }
    start: 内容与网格区域的左端对齐
    end: 内容与网格区域的右端对齐
    center: 内容位于网格区域的中间位置
    stretch: 内容宽度占据整个网格区域空间(这是默认值)

1.08 （内容与网格区域、align-items列轴）沿着列轴对齐grid item 里的内容，该值适用于容器内的所有 grid items。
    .container {
    align-items: start | end | center | stretch;
    }
    start: 内容与网格区域的顶端对齐
    end: 内容与网格区域的底部对齐
    center: 内容位于网格区域的垂直中心位置
    stretch: 内容高度占据整个网格区域空间(这是默认值)

1.09 （网格与网格容器、justify-content行轴）设置网格容器内的网格的对齐方式。 此属性沿着行轴对齐网格。
    .container {
    justify-content: start | end | center | stretch | space-around | space-between | space-evenly;  
    }
    start - 网格与网格容器的左边对齐
    end - 网格与网格容器的右边对齐
    center - 网格与网格容器的中间对齐
    stretch - 调整g rid item 的大小，让宽度填充整个网格容器
    space-around - 在 grid item 之间设置均等宽度的空白间隙，其外边缘间隙大小为中间空白间隙宽度的一半
    space-between - 在 grid item 之间设置均等宽度空白间隙，其外边缘无间隙
    space-evenly - 在每个 grid item 之间设置均等宽度的空白间隙，包括外边缘
1.10 （网格与网格容器、align-content列轴）设置网格容器内的网格的对齐方式。此属性沿着列轴对齐网格。
    .container {
    align-content: start | end | center | stretch | space-around | space-between | space-evenly;  
    }
    start - 网格与网格容器的顶部对齐
    end - 网格与网格容器的底部对齐
    center - 网格与网格容器的中间对齐
    stretch - 调整 grid item 的大小，让高度填充整个网格容器
    space-around - 在 grid item 之间设置均等宽度的空白间隙，其外边缘间隙大小为中间空白间隙宽度的一半
    space-between - 在 grid item 之间设置均等宽度空白间隙，其外边缘无间隙
    space-evenly - 在每个 grid item 之间设置均等宽度的空白间隙，包括外边缘
1.11 grid-auto-columns / grid-auto-rows
指定自动生成的网格轨道（又名隐式网格轨道）的大小。 隐式网格轨道在你显式的定位超出指定网格范围的行或列（使用 grid-template-rows/grid-template-columns）时被创建。

.container {
  grid-template-columns: 60px 60px;
  grid-template-rows: 90px 90px
}
使用 grid-column 和 grid-row 来定位你的网格项目
.item-a {
  grid-column: 1 / 2;
  grid-row: 2 / 3;
}
.item-b {
  grid-column: 5 / 6;
  grid-row: 2 / 3;
}
引用不存在的网格线，宽度为0的隐式轨道的就会被创建用与填补间隙。我们可以使用 grid-auto-columns 和 grid-auto-rows属性来指定这些隐式轨道的宽度
.container {
  grid-auto-columns: 60px;
}

1.12 grid-auto-flow如果你存在没有显示指明放置在网格上的 grid item，则自动放置算法会自动放置这些项目。 而该属性则用于控制自动布局算法的工作方式。
.container {
  grid-auto-flow: row | column | row dense | column dense
}
row - 告诉自动布局算法依次填充每行，根据需要添加新行
column - 告诉自动布局算法依次填充每列，根据需要添加新列
dense - 告诉自动布局算法，如果后面出现较小的 grid item，则尝试在网格中填充空洞
dense 可能导致您的 grid item 乱序。

1.13 grid 在单个属性中设置所有以下属性的简写：grid-template-rows，grid-template-columns，grid-template-areas，grid-auto-rows，grid-auto-columns和grid-auto-flow。 它同时也将 sets grid-column-gap 和 grid-row-gap 设置为它们的初始值，即使它们不能被此属性显示设置。

NO.2
孩子(Grid Items) 的全部属性
2.01 grid-column-start / grid-column-end / grid-row-start /grid-row-end使用特定的网格线确定 grid item 在网格内的位置。网格线的起始位置、网格项的网格线的终止位置。
    .item {
    grid-column-start: <number> | <name> | span <number> | span <name> | auto
    grid-column-end: <number> | <name> | span <number> | span <name> | auto
    grid-row-start: <number> | <name> | span <number> | span <name> | auto
    grid-row-end: <number> | <name> | span <number> | span <name> | auto
    }
    <line>: 可以是一个数字来指代相应编号的网格线，也可使用名称指代相应命名的网格线
    span <number>: 网格项将跨越指定数量的网格轨道
    span <name>: 网格项将跨越一些轨道，直到碰到指定命名的网格线
    auto: 自动布局， 或者自动跨越， 或者跨越一个默认的轨道
    如果没有声明 grid-column-end / grid-row-end，默认情况下，该网格项将跨越1个轨道。

    网格项可以相互重叠。 您可以使用z-index来控制它们的堆叠顺序。

2.02 grid-column / grid-row
    grid-column-start + grid-column-end, 和 grid-row-start + grid-row-end 的简写形式。

2.03 grid-area 给 grid item 进行命名以便于使用 grid-template-areas 属性创建模板时来进行引用。另外也可以做为 grid-row-start + grid-column-start + grid-row-end + grid-column-end 的简写形式。
    .item {
    grid-area: <name> | <row-start> / <column-start> / <row-end> / <column-end>;
    }
    <name> - 你的命名
    <row-start> / <column-start> / <row-end> /<column-end> - 可以是数字，也可以是网格线的名字
    给一个网格项命名
    .item-d {
    grid-area: header
    }
    作为 grid-row-start + grid-column-start + grid-row-end + grid-column-end 的简写:
    .item-d {
    grid-area: 1 / col4-start / last-line / 6
    }
2.04 justify-self （单个网格项内的内容、行轴）沿着行轴对齐grid item 里的内容（与之对应的是 align-self, 即沿列轴对齐）。 此属性对单个网格项内的内容生效。
    .item-a {
    justify-self: start;
    }
    start - 将内容对齐到网格区域的左端
    end - 将内容对齐到网格区域的右端
    center - 将内容对齐到网格区域的中间
    stretch - 填充网格区域的宽度 (这是默认值)

2.05 align-self （单个网格项内的内容、列轴）沿着列轴对齐grid item 里的内容（与之对应的是 justify-self, 即沿行轴对齐）。 此属性对单个网格项内的内容生效。
    .item {
    align-self: start | end | center | stretch;
    }
    start - 将内容对齐到网格区域的顶部
    end - 将内容对齐到网格区域的底部
    center - 将内容对齐到网格区域的中间
    stretch - 填充网格区域的高度 (这是默认值)









grid-template-columns 设置列的尺寸大小
grid-template-rows 设置行的尺寸大小